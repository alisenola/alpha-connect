package tests

import (
	"gitlab.com/alphaticks/alpha-connect/enum"
	"gitlab.com/alphaticks/alpha-connect/models"
	"gitlab.com/alphaticks/xchanger/constants"
	"os"
	"testing"
)

func TestMain(m *testing.M) {

	code := m.Run()
	os.Exit(code)
}

var MDTests = []MDTest{
	{
		SecurityID:        1416768858288349990,
		Symbol:            "pi_xbtusd",
		SecurityType:      enum.SecurityType_CRYPTO_PERP,
		Exchange:          constants.CRYPTOFACILITIES,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.5,
		RoundLot:          1,
		HasMaturityDate:   false,
		IsInverse:         true,
		Status:            models.Trading,
	},
	{
		SecurityID:        9281941173829172773,
		Symbol:            "BTCUSDT",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.BINANCE,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.TETHER,
		MinPriceIncrement: 0.01,
		RoundLot:          0.000010,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},
	{
		SecurityID:        17873758715870285590,
		Symbol:            "btcusd",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.BITFINEX,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.1,
		RoundLot:          1. / 100000000.,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},
	{
		SecurityID:        5391998915988476130,
		Symbol:            "XBTUSD",
		SecurityType:      enum.SecurityType_CRYPTO_PERP,
		Exchange:          constants.BITMEX,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.5,
		RoundLot:          100.,
		HasMaturityDate:   false,
		IsInverse:         true,
		Status:            models.Trading,
	},

	{
		SecurityID:        5279696656781449381,
		Symbol:            "btcusd",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.BITSTAMP,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.01,
		RoundLot:          0.00000001,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},

	{
		SecurityID:        5485975358912730733,
		Symbol:            "BTCUSDT",
		SecurityType:      enum.SecurityType_CRYPTO_PERP,
		Exchange:          constants.FBINANCE,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.TETHER,
		MinPriceIncrement: 0.01,
		RoundLot:          0.001,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},

	{
		SecurityID:        4425198260936995601,
		Symbol:            "BTC-PERP",
		SecurityType:      enum.SecurityType_CRYPTO_PERP,
		Exchange:          constants.FTX,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 1,
		RoundLot:          0.0001,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},

	{
		SecurityID:        2028777944171259534,
		Symbol:            "BTC/USDT",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.FTXUS,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.TETHER,
		MinPriceIncrement: 1,
		RoundLot:          0.0001,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},

	{
		SecurityID:        2195469462990134438,
		Symbol:            "btcusdt",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.HUOBI,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.TETHER,
		MinPriceIncrement: 0.01,
		RoundLot:          1e-6,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},
	{
		SecurityID:        17496373742670049989,
		Symbol:            "btcusd",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.GEMINI,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.01,
		RoundLot:          1e-8,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},

	{
		SecurityID:        12674447834540883135,
		Symbol:            "BTCUSD",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.HITBTC,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.TETHER,
		MinPriceIncrement: 0.01,
		RoundLot:          1e-5,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},

	{
		SecurityID:        10955098577666557860,
		Symbol:            "XBT/USD",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.KRAKEN,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.1,
		RoundLot:          1e-8,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},
	{
		SecurityID:        945944519923594006,
		Symbol:            "BTC-USDT",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.OKEX,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.TETHER,
		MinPriceIncrement: 0.1,
		RoundLot:          1e-08,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},

	{
		SecurityID:        10652256150546133071,
		Symbol:            "BTC-USDT-SWAP",
		SecurityType:      enum.SecurityType_CRYPTO_PERP,
		Exchange:          constants.OKEXP,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.TETHER,
		MinPriceIncrement: 0.1,
		RoundLot:          1,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},
	{
		SecurityID:        2206542817128348325,
		Symbol:            "BTC-PERPETUAL",
		SecurityType:      enum.SecurityType_CRYPTO_PERP,
		Exchange:          constants.DERIBIT,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.5,
		RoundLot:          10.,
		HasMaturityDate:   false,
		IsInverse:         true,
		Status:            models.Trading,
	},
	{
		SecurityID:        10070367938184144403,
		Symbol:            "BTC-USD",
		SecurityType:      enum.SecurityType_CRYPTO_PERP,
		Exchange:          constants.HUOBIP,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.1,
		RoundLot:          1.,
		HasMaturityDate:   false,
		IsInverse:         true,
		Status:            models.Trading,
	},

	{
		SecurityID:        2402007053666382556,
		Symbol:            "BTC210625",
		SecurityType:      enum.SecurityType_CRYPTO_FUT,
		Exchange:          constants.HUOBIF,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.01,
		RoundLot:          1.,
		HasMaturityDate:   true,
		IsInverse:         false,
		Status:            models.Trading,
	},
	{
		SecurityID:        7374647908427501521,
		Symbol:            "BTCUSD",
		SecurityType:      enum.SecurityType_CRYPTO_PERP,
		Exchange:          constants.BYBITI,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.5,
		RoundLot:          1.,
		HasMaturityDate:   false,
		IsInverse:         true,
		Status:            models.Trading,
	},
	{
		SecurityID:        6789757764526280996,
		Symbol:            "BTCUSDT",
		SecurityType:      enum.SecurityType_CRYPTO_PERP,
		Exchange:          constants.BYBITL,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.TETHER,
		MinPriceIncrement: 0.5,
		RoundLot:          0.001,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},
	{
		SecurityID:        13641637530641868249,
		Symbol:            "KRW-BTC",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.UPBIT,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.SOUTH_KOREAN_WON,
		MinPriceIncrement: 0.,
		RoundLot:          0.,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},
	{
		SecurityID:        8219034216918946889,
		Symbol:            "BTC-USDT",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.BITHUMBG,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.TETHER,
		MinPriceIncrement: 0.01,
		RoundLot:          1e-06,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},
	{
		SecurityID:        13112609607273681222,
		Symbol:            "ETH-USD",
		SecurityType:      enum.SecurityType_CRYPTO_PERP,
		Exchange:          constants.DYDX,
		BaseCurrency:      constants.ETHEREUM,
		QuoteCurrency:     constants.USDC,
		MinPriceIncrement: 0.1,
		RoundLot:          0.001,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},
	{
		SecurityID:        11630614572540763252,
		Symbol:            "BTC-USD",
		SecurityType:      enum.SecurityType_CRYPTO_SPOT,
		Exchange:          constants.COINBASEPRO,
		BaseCurrency:      constants.BITCOIN,
		QuoteCurrency:     constants.DOLLAR,
		MinPriceIncrement: 0.01,
		RoundLot:          1e-08,
		HasMaturityDate:   false,
		IsInverse:         false,
		Status:            models.Trading,
	},
}

func TestAll(t *testing.T) {
	t.Parallel()
	for _, tc := range MDTests {
		tc := tc
		t.Run(tc.Exchange.Name, func(t *testing.T) {
			t.Parallel()
			MarketData(t, tc)
		})
	}
}
