// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: asset_data.proto

package models

import (
	bytes "bytes"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	models "gitlab.com/alphaticks/xchanger/models"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProtocolAsset struct {
	Address     []byte           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Symbol      string           `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	TotalSupply []byte           `protobuf:"bytes,4,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	Protocol    *models.Protocol `protobuf:"bytes,5,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *ProtocolAsset) Reset()      { *m = ProtocolAsset{} }
func (*ProtocolAsset) ProtoMessage() {}
func (*ProtocolAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7bd1bc6b244e966, []int{0}
}
func (m *ProtocolAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtocolAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolAsset.Merge(m, src)
}
func (m *ProtocolAsset) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolAsset.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolAsset proto.InternalMessageInfo

func (m *ProtocolAsset) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ProtocolAsset) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProtocolAsset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ProtocolAsset) GetTotalSupply() []byte {
	if m != nil {
		return m.TotalSupply
	}
	return nil
}

func (m *ProtocolAsset) GetProtocol() *models.Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func init() {
	proto.RegisterType((*ProtocolAsset)(nil), "models.ProtocolAsset")
}

func init() { proto.RegisterFile("asset_data.proto", fileDescriptor_f7bd1bc6b244e966) }

var fileDescriptor_f7bd1bc6b244e966 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8e, 0x3d, 0x4e, 0xc3, 0x40,
	0x10, 0x85, 0x77, 0x20, 0x04, 0xd8, 0x04, 0x29, 0xda, 0x02, 0xad, 0x28, 0x46, 0x86, 0xca, 0x05,
	0xb2, 0xa5, 0xc0, 0x05, 0xe0, 0x04, 0xc8, 0x1c, 0x20, 0x1a, 0xff, 0x28, 0x89, 0x58, 0x67, 0x2d,
	0xef, 0x22, 0x91, 0x8e, 0x23, 0x70, 0x0a, 0xc4, 0x51, 0x28, 0x5d, 0xa6, 0xc4, 0xeb, 0x86, 0x32,
	0x47, 0x40, 0x59, 0x27, 0x74, 0xf3, 0x9e, 0xde, 0xf7, 0xe6, 0xf1, 0x09, 0x19, 0x53, 0xd8, 0x59,
	0x4e, 0x96, 0xa2, 0xaa, 0xd6, 0x56, 0x8b, 0x61, 0xa9, 0xf3, 0x42, 0x99, 0xab, 0xe9, 0x7c, 0x69,
	0x15, 0xa5, 0x51, 0xa6, 0xcb, 0x98, 0x54, 0xb5, 0x20, 0xbb, 0xcc, 0x5e, 0x4c, 0xfc, 0x96, 0x2d,
	0x68, 0x35, 0x2f, 0xea, 0xb8, 0x8f, 0xc5, 0x1e, 0x32, 0x3d, 0x7b, 0xf3, 0x09, 0xfc, 0xe2, 0x69,
	0x77, 0x65, 0x5a, 0x3d, 0xec, 0x8a, 0x85, 0xe4, 0xa7, 0x94, 0xe7, 0x75, 0x61, 0x8c, 0x84, 0x00,
	0xc2, 0x71, 0x72, 0x90, 0x42, 0xf0, 0xc1, 0x8a, 0xca, 0x42, 0x1e, 0x05, 0x10, 0x9e, 0x27, 0xfe,
	0x16, 0x97, 0x7c, 0x68, 0xd6, 0x65, 0xaa, 0x95, 0x3c, 0xf6, 0xee, 0x5e, 0x89, 0x6b, 0x3e, 0xb6,
	0xda, 0x92, 0x9a, 0x99, 0xd7, 0xaa, 0x52, 0x6b, 0x39, 0xf0, 0x55, 0x23, 0xef, 0x3d, 0x7b, 0x4b,
	0xdc, 0xf2, 0xb3, 0x6a, 0xff, 0x59, 0x9e, 0x04, 0x10, 0x8e, 0xa6, 0x93, 0xa8, 0x9f, 0x18, 0x1d,
	0x16, 0x25, 0xff, 0x89, 0xc7, 0xfb, 0xa6, 0x45, 0xb6, 0x69, 0x91, 0x6d, 0x5b, 0x84, 0x77, 0x87,
	0xf0, 0xe5, 0x10, 0xbe, 0x1d, 0x42, 0xe3, 0x10, 0x7e, 0x1c, 0xc2, 0xaf, 0x43, 0xb6, 0x75, 0x08,
	0x1f, 0x1d, 0xb2, 0xa6, 0x43, 0xb6, 0xe9, 0x90, 0xa5, 0x43, 0xcf, 0xdf, 0xfd, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x9d, 0x6d, 0x06, 0x2f, 0x35, 0x01, 0x00, 0x00,
}

func (this *ProtocolAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProtocolAsset)
	if !ok {
		that2, ok := that.(ProtocolAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if !bytes.Equal(this.TotalSupply, that1.TotalSupply) {
		return false
	}
	if !this.Protocol.Equal(that1.Protocol) {
		return false
	}
	return true
}
func (this *ProtocolAsset) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&models.ProtocolAsset{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Symbol: "+fmt.Sprintf("%#v", this.Symbol)+",\n")
	s = append(s, "TotalSupply: "+fmt.Sprintf("%#v", this.TotalSupply)+",\n")
	if this.Protocol != nil {
		s = append(s, "Protocol: "+fmt.Sprintf("%#v", this.Protocol)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAssetData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ProtocolAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAssetData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TotalSupply) > 0 {
		i -= len(m.TotalSupply)
		copy(dAtA[i:], m.TotalSupply)
		i = encodeVarintAssetData(dAtA, i, uint64(len(m.TotalSupply)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintAssetData(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAssetData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintAssetData(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAssetData(dAtA []byte, offset int, v uint64) int {
	offset -= sovAssetData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProtocolAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAssetData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAssetData(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovAssetData(uint64(l))
	}
	l = len(m.TotalSupply)
	if l > 0 {
		n += 1 + l + sovAssetData(uint64(l))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovAssetData(uint64(l))
	}
	return n
}

func sovAssetData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAssetData(x uint64) (n int) {
	return sovAssetData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProtocolAsset) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProtocolAsset{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Symbol:` + fmt.Sprintf("%v", this.Symbol) + `,`,
		`TotalSupply:` + fmt.Sprintf("%v", this.TotalSupply) + `,`,
		`Protocol:` + strings.Replace(fmt.Sprintf("%v", this.Protocol), "Protocol", "models.Protocol", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAssetData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ProtocolAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssetData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssetData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssetData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssetData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssetData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAssetData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAssetData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssetData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssetData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = append(m.TotalSupply[:0], dAtA[iNdEx:postIndex]...)
			if m.TotalSupply == nil {
				m.TotalSupply = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAssetData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAssetData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &models.Protocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAssetData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAssetData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAssetData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAssetData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssetData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAssetData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAssetData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAssetData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAssetData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAssetData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAssetData = fmt.Errorf("proto: unexpected end of group")
)
