// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.20.1
// source: security_data.proto

package models

import (
	models "gitlab.com/alphaticks/xchanger/models"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstrumentStatus int32

const (
	InstrumentStatus_PreTrading   InstrumentStatus = 0
	InstrumentStatus_Trading      InstrumentStatus = 1
	InstrumentStatus_PostTrading  InstrumentStatus = 2
	InstrumentStatus_EndOfDay     InstrumentStatus = 3
	InstrumentStatus_Halt         InstrumentStatus = 4
	InstrumentStatus_AuctionMatch InstrumentStatus = 5
	InstrumentStatus_Break        InstrumentStatus = 6
	InstrumentStatus_Disabled     InstrumentStatus = 7
)

// Enum value maps for InstrumentStatus.
var (
	InstrumentStatus_name = map[int32]string{
		0: "PreTrading",
		1: "Trading",
		2: "PostTrading",
		3: "EndOfDay",
		4: "Halt",
		5: "AuctionMatch",
		6: "Break",
		7: "Disabled",
	}
	InstrumentStatus_value = map[string]int32{
		"PreTrading":   0,
		"Trading":      1,
		"PostTrading":  2,
		"EndOfDay":     3,
		"Halt":         4,
		"AuctionMatch": 5,
		"Break":        6,
		"Disabled":     7,
	}
)

func (x InstrumentStatus) Enum() *InstrumentStatus {
	p := new(InstrumentStatus)
	*p = x
	return p
}

func (x InstrumentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstrumentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_security_data_proto_enumTypes[0].Descriptor()
}

func (InstrumentStatus) Type() protoreflect.EnumType {
	return &file_security_data_proto_enumTypes[0]
}

func (x InstrumentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstrumentStatus.Descriptor instead.
func (InstrumentStatus) EnumDescriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{0}
}

type ExecutionInstruction int32

const (
	ExecutionInstruction_ParticipateDoNotInitiate ExecutionInstruction = 0
	ExecutionInstruction_ReduceOnly               ExecutionInstruction = 1
	ExecutionInstruction_CloseOnTrigger           ExecutionInstruction = 2
)

// Enum value maps for ExecutionInstruction.
var (
	ExecutionInstruction_name = map[int32]string{
		0: "ParticipateDoNotInitiate",
		1: "ReduceOnly",
		2: "CloseOnTrigger",
	}
	ExecutionInstruction_value = map[string]int32{
		"ParticipateDoNotInitiate": 0,
		"ReduceOnly":               1,
		"CloseOnTrigger":           2,
	}
)

func (x ExecutionInstruction) Enum() *ExecutionInstruction {
	p := new(ExecutionInstruction)
	*p = x
	return p
}

func (x ExecutionInstruction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionInstruction) Descriptor() protoreflect.EnumDescriptor {
	return file_security_data_proto_enumTypes[1].Descriptor()
}

func (ExecutionInstruction) Type() protoreflect.EnumType {
	return &file_security_data_proto_enumTypes[1]
}

func (x ExecutionInstruction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionInstruction.Descriptor instead.
func (ExecutionInstruction) EnumDescriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{1}
}

type TradeType int32

const (
	TradeType_Regular             TradeType = 0
	TradeType_Block               TradeType = 1
	TradeType_ExchangeForPhysical TradeType = 2
	TradeType_Transfer            TradeType = 3
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "Regular",
		1: "Block",
		2: "ExchangeForPhysical",
		3: "Transfer",
	}
	TradeType_value = map[string]int32{
		"Regular":             0,
		"Block":               1,
		"ExchangeForPhysical": 2,
		"Transfer":            3,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_security_data_proto_enumTypes[2].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_security_data_proto_enumTypes[2]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{2}
}

type Side int32

const (
	Side_Buy  Side = 0
	Side_Sell Side = 1
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "Buy",
		1: "Sell",
	}
	Side_value = map[string]int32{
		"Buy":  0,
		"Sell": 1,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_security_data_proto_enumTypes[3].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_security_data_proto_enumTypes[3]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{3}
}

type OrderStatus int32

const (
	OrderStatus_New             OrderStatus = 0
	OrderStatus_PartiallyFilled OrderStatus = 1
	OrderStatus_Filled          OrderStatus = 2
	OrderStatus_Done            OrderStatus = 3
	OrderStatus_Canceled        OrderStatus = 4
	OrderStatus_Replaced        OrderStatus = 5
	OrderStatus_PendingCancel   OrderStatus = 6
	OrderStatus_Stopped         OrderStatus = 7
	OrderStatus_Rejected        OrderStatus = 8
	OrderStatus_Suspended       OrderStatus = 9
	OrderStatus_PendingNew      OrderStatus = 10
	OrderStatus_Calculated      OrderStatus = 11
	OrderStatus_Expired         OrderStatus = 12
	OrderStatus_PendingReplace  OrderStatus = 13
	OrderStatus_Created         OrderStatus = 14
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0:  "New",
		1:  "PartiallyFilled",
		2:  "Filled",
		3:  "Done",
		4:  "Canceled",
		5:  "Replaced",
		6:  "PendingCancel",
		7:  "Stopped",
		8:  "Rejected",
		9:  "Suspended",
		10: "PendingNew",
		11: "Calculated",
		12: "Expired",
		13: "PendingReplace",
		14: "Created",
	}
	OrderStatus_value = map[string]int32{
		"New":             0,
		"PartiallyFilled": 1,
		"Filled":          2,
		"Done":            3,
		"Canceled":        4,
		"Replaced":        5,
		"PendingCancel":   6,
		"Stopped":         7,
		"Rejected":        8,
		"Suspended":       9,
		"PendingNew":      10,
		"Calculated":      11,
		"Expired":         12,
		"PendingReplace":  13,
		"Created":         14,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_security_data_proto_enumTypes[4].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_security_data_proto_enumTypes[4]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{4}
}

type OrderType int32

const (
	OrderType_Market            OrderType = 0
	OrderType_Limit             OrderType = 1
	OrderType_Stop              OrderType = 2
	OrderType_StopLimit         OrderType = 3
	OrderType_LimitIfTouched    OrderType = 4
	OrderType_MarketIfTouched   OrderType = 5
	OrderType_TrailingStopLimit OrderType = 6
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "Market",
		1: "Limit",
		2: "Stop",
		3: "StopLimit",
		4: "LimitIfTouched",
		5: "MarketIfTouched",
		6: "TrailingStopLimit",
	}
	OrderType_value = map[string]int32{
		"Market":            0,
		"Limit":             1,
		"Stop":              2,
		"StopLimit":         3,
		"LimitIfTouched":    4,
		"MarketIfTouched":   5,
		"TrailingStopLimit": 6,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_security_data_proto_enumTypes[5].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_security_data_proto_enumTypes[5]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{5}
}

type TimeInForce int32

const (
	TimeInForce_Session           TimeInForce = 0
	TimeInForce_GoodTillCancel    TimeInForce = 1
	TimeInForce_AtTheOpening      TimeInForce = 2
	TimeInForce_ImmediateOrCancel TimeInForce = 3
	TimeInForce_FillOrKill        TimeInForce = 4
	TimeInForce_PostOnly          TimeInForce = 5
)

// Enum value maps for TimeInForce.
var (
	TimeInForce_name = map[int32]string{
		0: "Session",
		1: "GoodTillCancel",
		2: "AtTheOpening",
		3: "ImmediateOrCancel",
		4: "FillOrKill",
		5: "PostOnly",
	}
	TimeInForce_value = map[string]int32{
		"Session":           0,
		"GoodTillCancel":    1,
		"AtTheOpening":      2,
		"ImmediateOrCancel": 3,
		"FillOrKill":        4,
		"PostOnly":          5,
	}
)

func (x TimeInForce) Enum() *TimeInForce {
	p := new(TimeInForce)
	*p = x
	return p
}

func (x TimeInForce) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForce) Descriptor() protoreflect.EnumDescriptor {
	return file_security_data_proto_enumTypes[6].Descriptor()
}

func (TimeInForce) Type() protoreflect.EnumType {
	return &file_security_data_proto_enumTypes[6]
}

func (x TimeInForce) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForce.Descriptor instead.
func (TimeInForce) EnumDescriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{6}
}

type Instrument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityID *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=securityID,proto3" json:"securityID,omitempty"`
	Exchange   *models.Exchange        `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *Instrument) Reset() {
	*x = Instrument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instrument) ProtoMessage() {}

func (x *Instrument) ProtoReflect() protoreflect.Message {
	mi := &file_security_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instrument.ProtoReflect.Descriptor instead.
func (*Instrument) Descriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{0}
}

func (x *Instrument) GetSecurityID() *wrapperspb.UInt64Value {
	if x != nil {
		return x.SecurityID
	}
	return nil
}

func (x *Instrument) GetExchange() *models.Exchange {
	if x != nil {
		return x.Exchange
	}
	return nil
}

func (x *Instrument) GetSymbol() *wrapperspb.StringValue {
	if x != nil {
		return x.Symbol
	}
	return nil
}

type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityID        uint64                  `protobuf:"varint,1,opt,name=securityID,proto3" json:"securityID,omitempty"`
	SecurityType      string                  `protobuf:"bytes,2,opt,name=securityType,proto3" json:"securityType,omitempty"`
	Exchange          *models.Exchange        `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Symbol            string                  `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Underlying        *models.Asset           `protobuf:"bytes,7,opt,name=underlying,proto3" json:"underlying,omitempty"`
	QuoteCurrency     *models.Asset           `protobuf:"bytes,8,opt,name=quote_currency,json=quoteCurrency,proto3" json:"quote_currency,omitempty"`
	Status            InstrumentStatus        `protobuf:"varint,9,opt,name=status,proto3,enum=models.InstrumentStatus" json:"status,omitempty"`
	IsInverse         bool                    `protobuf:"varint,10,opt,name=is_inverse,json=isInverse,proto3" json:"is_inverse,omitempty"`
	MinPriceIncrement *wrapperspb.DoubleValue `protobuf:"bytes,11,opt,name=min_price_increment,json=minPriceIncrement,proto3" json:"min_price_increment,omitempty"`
	RoundLot          *wrapperspb.DoubleValue `protobuf:"bytes,12,opt,name=round_lot,json=roundLot,proto3" json:"round_lot,omitempty"`
	MakerFee          *wrapperspb.DoubleValue `protobuf:"bytes,13,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"`
	TakerFee          *wrapperspb.DoubleValue `protobuf:"bytes,14,opt,name=taker_fee,json=takerFee,proto3" json:"taker_fee,omitempty"`
	Multiplier        *wrapperspb.DoubleValue `protobuf:"bytes,15,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	MaturityDate      *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=maturity_date,json=maturityDate,proto3" json:"maturity_date,omitempty"`
	SecuritySubType   *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=securitySubType,proto3" json:"securitySubType,omitempty"`
	MaxLimitQuantity  *wrapperspb.DoubleValue `protobuf:"bytes,18,opt,name=max_limit_quantity,json=maxLimitQuantity,proto3" json:"max_limit_quantity,omitempty"`
	MaxMarketQuantity *wrapperspb.DoubleValue `protobuf:"bytes,19,opt,name=max_market_quantity,json=maxMarketQuantity,proto3" json:"max_market_quantity,omitempty"`
	MinLimitQuantity  *wrapperspb.DoubleValue `protobuf:"bytes,24,opt,name=min_limit_quantity,json=minLimitQuantity,proto3" json:"min_limit_quantity,omitempty"`
	MinMarketQuantity *wrapperspb.DoubleValue `protobuf:"bytes,25,opt,name=min_market_quantity,json=minMarketQuantity,proto3" json:"min_market_quantity,omitempty"`
	CreationDate      *timestamppb.Timestamp  `protobuf:"bytes,20,opt,name=creation_date,json=creationDate,proto3" json:"creation_date,omitempty"`
	CreationBlock     *wrapperspb.UInt64Value `protobuf:"bytes,21,opt,name=creation_block,json=creationBlock,proto3" json:"creation_block,omitempty"`
	Protocol          *models.Protocol        `protobuf:"bytes,22,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Chain             *models.Chain           `protobuf:"bytes,23,opt,name=chain,proto3" json:"chain,omitempty"`
	Price             *wrapperspb.DoubleValue `protobuf:"bytes,26,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *Security) Reset() {
	*x = Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_security_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{1}
}

func (x *Security) GetSecurityID() uint64 {
	if x != nil {
		return x.SecurityID
	}
	return 0
}

func (x *Security) GetSecurityType() string {
	if x != nil {
		return x.SecurityType
	}
	return ""
}

func (x *Security) GetExchange() *models.Exchange {
	if x != nil {
		return x.Exchange
	}
	return nil
}

func (x *Security) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Security) GetUnderlying() *models.Asset {
	if x != nil {
		return x.Underlying
	}
	return nil
}

func (x *Security) GetQuoteCurrency() *models.Asset {
	if x != nil {
		return x.QuoteCurrency
	}
	return nil
}

func (x *Security) GetStatus() InstrumentStatus {
	if x != nil {
		return x.Status
	}
	return InstrumentStatus_PreTrading
}

func (x *Security) GetIsInverse() bool {
	if x != nil {
		return x.IsInverse
	}
	return false
}

func (x *Security) GetMinPriceIncrement() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinPriceIncrement
	}
	return nil
}

func (x *Security) GetRoundLot() *wrapperspb.DoubleValue {
	if x != nil {
		return x.RoundLot
	}
	return nil
}

func (x *Security) GetMakerFee() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MakerFee
	}
	return nil
}

func (x *Security) GetTakerFee() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TakerFee
	}
	return nil
}

func (x *Security) GetMultiplier() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Multiplier
	}
	return nil
}

func (x *Security) GetMaturityDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MaturityDate
	}
	return nil
}

func (x *Security) GetSecuritySubType() *wrapperspb.StringValue {
	if x != nil {
		return x.SecuritySubType
	}
	return nil
}

func (x *Security) GetMaxLimitQuantity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxLimitQuantity
	}
	return nil
}

func (x *Security) GetMaxMarketQuantity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxMarketQuantity
	}
	return nil
}

func (x *Security) GetMinLimitQuantity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinLimitQuantity
	}
	return nil
}

func (x *Security) GetMinMarketQuantity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinMarketQuantity
	}
	return nil
}

func (x *Security) GetCreationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationDate
	}
	return nil
}

func (x *Security) GetCreationBlock() *wrapperspb.UInt64Value {
	if x != nil {
		return x.CreationBlock
	}
	return nil
}

func (x *Security) GetProtocol() *models.Protocol {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *Security) GetChain() *models.Chain {
	if x != nil {
		return x.Chain
	}
	return nil
}

func (x *Security) GetPrice() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Price
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID               string                  `protobuf:"bytes,1,opt,name=orderID,proto3" json:"orderID,omitempty"`
	ClientOrderID         string                  `protobuf:"bytes,2,opt,name=client_orderID,json=clientOrderID,proto3" json:"client_orderID,omitempty"`
	Instrument            *Instrument             `protobuf:"bytes,3,opt,name=instrument,proto3" json:"instrument,omitempty"`
	OrderStatus           OrderStatus             `protobuf:"varint,4,opt,name=order_status,json=orderStatus,proto3,enum=models.OrderStatus" json:"order_status,omitempty"`
	OrderType             OrderType               `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3,enum=models.OrderType" json:"order_type,omitempty"`
	Side                  Side                    `protobuf:"varint,6,opt,name=side,proto3,enum=models.Side" json:"side,omitempty"`
	TimeInForce           TimeInForce             `protobuf:"varint,7,opt,name=time_in_force,json=timeInForce,proto3,enum=models.TimeInForce" json:"time_in_force,omitempty"`
	LeavesQuantity        float64                 `protobuf:"fixed64,8,opt,name=leaves_quantity,json=leavesQuantity,proto3" json:"leaves_quantity,omitempty"`
	CumQuantity           float64                 `protobuf:"fixed64,9,opt,name=cum_quantity,json=cumQuantity,proto3" json:"cum_quantity,omitempty"`
	Price                 *wrapperspb.DoubleValue `protobuf:"bytes,10,opt,name=price,proto3" json:"price,omitempty"`
	ExecutionInstructions []ExecutionInstruction  `protobuf:"varint,11,rep,packed,name=execution_instructions,json=executionInstructions,proto3,enum=models.ExecutionInstruction" json:"execution_instructions,omitempty"`
	Tag                   string                  `protobuf:"bytes,12,opt,name=tag,proto3" json:"tag,omitempty"`
	CreationTime          *timestamppb.Timestamp  `protobuf:"bytes,13,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	LastEventTime         *timestamppb.Timestamp  `protobuf:"bytes,14,opt,name=last_event_time,json=lastEventTime,proto3" json:"last_event_time,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_security_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{2}
}

func (x *Order) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *Order) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *Order) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *Order) GetOrderStatus() OrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return OrderStatus_New
}

func (x *Order) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_Market
}

func (x *Order) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_Buy
}

func (x *Order) GetTimeInForce() TimeInForce {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForce_Session
}

func (x *Order) GetLeavesQuantity() float64 {
	if x != nil {
		return x.LeavesQuantity
	}
	return 0
}

func (x *Order) GetCumQuantity() float64 {
	if x != nil {
		return x.CumQuantity
	}
	return 0
}

func (x *Order) GetPrice() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Order) GetExecutionInstructions() []ExecutionInstruction {
	if x != nil {
		return x.ExecutionInstructions
	}
	return nil
}

func (x *Order) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Order) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Order) GetLastEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEventTime
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    string                  `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Instrument *Instrument             `protobuf:"bytes,2,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Quantity   float64                 `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Cross      bool                    `protobuf:"varint,4,opt,name=cross,proto3" json:"cross,omitempty"`
	Cost       float64                 `protobuf:"fixed64,5,opt,name=cost,proto3" json:"cost,omitempty"`
	MarkPrice  *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=mark_price,json=markPrice,proto3" json:"mark_price,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_security_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{3}
}

func (x *Position) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Position) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *Position) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Position) GetCross() bool {
	if x != nil {
		return x.Cross
	}
	return false
}

func (x *Position) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *Position) GetMarkPrice() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MarkPrice
	}
	return nil
}

type Balance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string        `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Asset    *models.Asset `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Quantity float64       `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Balance) Reset() {
	*x = Balance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_security_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{4}
}

func (x *Balance) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Balance) GetAsset() *models.Asset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Balance) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type TradeCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Side            Side                    `protobuf:"varint,1,opt,name=side,proto3,enum=models.Side" json:"side,omitempty"`
	Type            TradeType               `protobuf:"varint,2,opt,name=type,proto3,enum=models.TradeType" json:"type,omitempty"`
	Price           float64                 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	Quantity        float64                 `protobuf:"fixed64,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Commission      float64                 `protobuf:"fixed64,5,opt,name=commission,proto3" json:"commission,omitempty"`
	CommissionAsset *models.Asset           `protobuf:"bytes,6,opt,name=commission_asset,json=commissionAsset,proto3" json:"commission_asset,omitempty"`
	TradeID         string                  `protobuf:"bytes,7,opt,name=tradeID,proto3" json:"tradeID,omitempty"`
	Instrument      *Instrument             `protobuf:"bytes,8,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Trade_LinkID    *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=trade_LinkID,json=tradeLinkID,proto3" json:"trade_LinkID,omitempty"`
	OrderID         *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=orderID,proto3" json:"orderID,omitempty"`
	ClientOrderID   *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=client_orderID,json=clientOrderID,proto3" json:"client_orderID,omitempty"`
	TransactionTime *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=transaction_time,json=transactionTime,proto3" json:"transaction_time,omitempty"`
}

func (x *TradeCapture) Reset() {
	*x = TradeCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCapture) ProtoMessage() {}

func (x *TradeCapture) ProtoReflect() protoreflect.Message {
	mi := &file_security_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCapture.ProtoReflect.Descriptor instead.
func (*TradeCapture) Descriptor() ([]byte, []int) {
	return file_security_data_proto_rawDescGZIP(), []int{5}
}

func (x *TradeCapture) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_Buy
}

func (x *TradeCapture) GetType() TradeType {
	if x != nil {
		return x.Type
	}
	return TradeType_Regular
}

func (x *TradeCapture) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeCapture) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *TradeCapture) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *TradeCapture) GetCommissionAsset() *models.Asset {
	if x != nil {
		return x.CommissionAsset
	}
	return nil
}

func (x *TradeCapture) GetTradeID() string {
	if x != nil {
		return x.TradeID
	}
	return ""
}

func (x *TradeCapture) GetInstrument() *Instrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *TradeCapture) GetTrade_LinkID() *wrapperspb.StringValue {
	if x != nil {
		return x.Trade_LinkID
	}
	return nil
}

func (x *TradeCapture) GetOrderID() *wrapperspb.StringValue {
	if x != nil {
		return x.OrderID
	}
	return nil
}

func (x *TradeCapture) GetClientOrderID() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientOrderID
	}
	return nil
}

func (x *TradeCapture) GetTransactionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TransactionTime
	}
	return nil
}

var File_security_data_proto protoreflect.FileDescriptor

var file_security_data_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x34, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x74,
	0x69, 0x63, 0x6b, 0x73, 0x2f, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x2f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2f, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x01, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0xd1, 0x0a, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2d, 0x0a, 0x0a,
	0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x0a, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x0e, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d,
	0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6c, 0x6f, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4c, 0x6f, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x6d,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x46, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x4a, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6d, 0x69,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4c,
	0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x23, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xad, 0x05, 0x0a, 0x05, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x6d, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x75,
	0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a,
	0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x08, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x64, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xb6, 0x04,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20,
	0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x4c, 0x69, 0x6e, 0x6b, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x49, 0x44, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x45, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x83, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x50,
	0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6e, 0x64,
	0x4f, 0x66, 0x44, 0x61, 0x79, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x61, 0x6c, 0x74, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x07, 0x2a, 0x58, 0x0a, 0x14,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x65, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x6e, 0x6c, 0x79,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x6e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x10, 0x02, 0x2a, 0x4a, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x10, 0x03, 0x2a, 0x19, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x75,
	0x79, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x65, 0x6c, 0x6c, 0x10, 0x01, 0x2a, 0xe8, 0x01,
	0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x65, 0x77, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x6c, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x10, 0x05, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x07, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x77, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x0e, 0x2a, 0x7b, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x74, 0x6f, 0x70, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x49, 0x66,
	0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x66, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x64, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x10, 0x06, 0x2a, 0x75, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x74, 0x54, 0x68, 0x65, 0x4f, 0x70,
	0x65, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x6d, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x6c, 0x4f, 0x72, 0x4b, 0x69, 0x6c, 0x6c, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x05, 0x42, 0x2c, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x74, 0x69, 0x63, 0x6b, 0x73, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_security_data_proto_rawDescOnce sync.Once
	file_security_data_proto_rawDescData = file_security_data_proto_rawDesc
)

func file_security_data_proto_rawDescGZIP() []byte {
	file_security_data_proto_rawDescOnce.Do(func() {
		file_security_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_security_data_proto_rawDescData)
	})
	return file_security_data_proto_rawDescData
}

var file_security_data_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_security_data_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_security_data_proto_goTypes = []interface{}{
	(InstrumentStatus)(0),          // 0: models.InstrumentStatus
	(ExecutionInstruction)(0),      // 1: models.ExecutionInstruction
	(TradeType)(0),                 // 2: models.TradeType
	(Side)(0),                      // 3: models.Side
	(OrderStatus)(0),               // 4: models.OrderStatus
	(OrderType)(0),                 // 5: models.OrderType
	(TimeInForce)(0),               // 6: models.TimeInForce
	(*Instrument)(nil),             // 7: models.Instrument
	(*Security)(nil),               // 8: models.Security
	(*Order)(nil),                  // 9: models.Order
	(*Position)(nil),               // 10: models.Position
	(*Balance)(nil),                // 11: models.Balance
	(*TradeCapture)(nil),           // 12: models.TradeCapture
	(*wrapperspb.UInt64Value)(nil), // 13: google.protobuf.UInt64Value
	(*models.Exchange)(nil),        // 14: models.Exchange
	(*wrapperspb.StringValue)(nil), // 15: google.protobuf.StringValue
	(*models.Asset)(nil),           // 16: models.Asset
	(*wrapperspb.DoubleValue)(nil), // 17: google.protobuf.DoubleValue
	(*timestamppb.Timestamp)(nil),  // 18: google.protobuf.Timestamp
	(*models.Protocol)(nil),        // 19: models.Protocol
	(*models.Chain)(nil),           // 20: models.Chain
}
var file_security_data_proto_depIdxs = []int32{
	13, // 0: models.Instrument.securityID:type_name -> google.protobuf.UInt64Value
	14, // 1: models.Instrument.exchange:type_name -> models.Exchange
	15, // 2: models.Instrument.symbol:type_name -> google.protobuf.StringValue
	14, // 3: models.Security.exchange:type_name -> models.Exchange
	16, // 4: models.Security.underlying:type_name -> models.Asset
	16, // 5: models.Security.quote_currency:type_name -> models.Asset
	0,  // 6: models.Security.status:type_name -> models.InstrumentStatus
	17, // 7: models.Security.min_price_increment:type_name -> google.protobuf.DoubleValue
	17, // 8: models.Security.round_lot:type_name -> google.protobuf.DoubleValue
	17, // 9: models.Security.maker_fee:type_name -> google.protobuf.DoubleValue
	17, // 10: models.Security.taker_fee:type_name -> google.protobuf.DoubleValue
	17, // 11: models.Security.multiplier:type_name -> google.protobuf.DoubleValue
	18, // 12: models.Security.maturity_date:type_name -> google.protobuf.Timestamp
	15, // 13: models.Security.securitySubType:type_name -> google.protobuf.StringValue
	17, // 14: models.Security.max_limit_quantity:type_name -> google.protobuf.DoubleValue
	17, // 15: models.Security.max_market_quantity:type_name -> google.protobuf.DoubleValue
	17, // 16: models.Security.min_limit_quantity:type_name -> google.protobuf.DoubleValue
	17, // 17: models.Security.min_market_quantity:type_name -> google.protobuf.DoubleValue
	18, // 18: models.Security.creation_date:type_name -> google.protobuf.Timestamp
	13, // 19: models.Security.creation_block:type_name -> google.protobuf.UInt64Value
	19, // 20: models.Security.protocol:type_name -> models.Protocol
	20, // 21: models.Security.chain:type_name -> models.Chain
	17, // 22: models.Security.price:type_name -> google.protobuf.DoubleValue
	7,  // 23: models.Order.instrument:type_name -> models.Instrument
	4,  // 24: models.Order.order_status:type_name -> models.OrderStatus
	5,  // 25: models.Order.order_type:type_name -> models.OrderType
	3,  // 26: models.Order.side:type_name -> models.Side
	6,  // 27: models.Order.time_in_force:type_name -> models.TimeInForce
	17, // 28: models.Order.price:type_name -> google.protobuf.DoubleValue
	1,  // 29: models.Order.execution_instructions:type_name -> models.ExecutionInstruction
	18, // 30: models.Order.creation_time:type_name -> google.protobuf.Timestamp
	18, // 31: models.Order.last_event_time:type_name -> google.protobuf.Timestamp
	7,  // 32: models.Position.instrument:type_name -> models.Instrument
	17, // 33: models.Position.mark_price:type_name -> google.protobuf.DoubleValue
	16, // 34: models.Balance.asset:type_name -> models.Asset
	3,  // 35: models.TradeCapture.side:type_name -> models.Side
	2,  // 36: models.TradeCapture.type:type_name -> models.TradeType
	16, // 37: models.TradeCapture.commission_asset:type_name -> models.Asset
	7,  // 38: models.TradeCapture.instrument:type_name -> models.Instrument
	15, // 39: models.TradeCapture.trade_LinkID:type_name -> google.protobuf.StringValue
	15, // 40: models.TradeCapture.orderID:type_name -> google.protobuf.StringValue
	15, // 41: models.TradeCapture.client_orderID:type_name -> google.protobuf.StringValue
	18, // 42: models.TradeCapture.transaction_time:type_name -> google.protobuf.Timestamp
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_security_data_proto_init() }
func file_security_data_proto_init() {
	if File_security_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_security_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instrument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Balance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_security_data_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_security_data_proto_goTypes,
		DependencyIndexes: file_security_data_proto_depIdxs,
		EnumInfos:         file_security_data_proto_enumTypes,
		MessageInfos:      file_security_data_proto_msgTypes,
	}.Build()
	File_security_data_proto = out.File
	file_security_data_proto_rawDesc = nil
	file_security_data_proto_goTypes = nil
	file_security_data_proto_depIdxs = nil
}
