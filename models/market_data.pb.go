// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.20.1
// source: market_data.proto

package models

import (
	gorderbook_models "gitlab.com/alphaticks/gorderbook/gorderbook.models"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatType int32

const (
	StatType_IndexValue              StatType = 0
	StatType_OpeningPrice            StatType = 1
	StatType_ClosingPrice            StatType = 2
	StatType_SettlementPrice         StatType = 3
	StatType_TradingSessionHighPrice StatType = 4
	StatType_TradingSessionLowPrice  StatType = 5
	StatType_TradingSessionVWAPPrice StatType = 6
	StatType_Imbalance               StatType = 7
	StatType_TradeVolume             StatType = 8
	StatType_OpenInterest            StatType = 9
	StatType_FundingRate             StatType = 10
)

// Enum value maps for StatType.
var (
	StatType_name = map[int32]string{
		0:  "IndexValue",
		1:  "OpeningPrice",
		2:  "ClosingPrice",
		3:  "SettlementPrice",
		4:  "TradingSessionHighPrice",
		5:  "TradingSessionLowPrice",
		6:  "TradingSessionVWAPPrice",
		7:  "Imbalance",
		8:  "TradeVolume",
		9:  "OpenInterest",
		10: "FundingRate",
	}
	StatType_value = map[string]int32{
		"IndexValue":              0,
		"OpeningPrice":            1,
		"ClosingPrice":            2,
		"SettlementPrice":         3,
		"TradingSessionHighPrice": 4,
		"TradingSessionLowPrice":  5,
		"TradingSessionVWAPPrice": 6,
		"Imbalance":               7,
		"TradeVolume":             8,
		"OpenInterest":            9,
		"FundingRate":             10,
	}
)

func (x StatType) Enum() *StatType {
	p := new(StatType)
	*p = x
	return p
}

func (x StatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatType) Descriptor() protoreflect.EnumDescriptor {
	return file_market_data_proto_enumTypes[0].Descriptor()
}

func (StatType) Type() protoreflect.EnumType {
	return &file_market_data_proto_enumTypes[0]
}

func (x StatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatType.Descriptor instead.
func (StatType) EnumDescriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{0}
}

type OrderBookAggregation int32

const (
	OrderBookAggregation_L1 OrderBookAggregation = 0
	OrderBookAggregation_L2 OrderBookAggregation = 1
	OrderBookAggregation_L3 OrderBookAggregation = 2
)

// Enum value maps for OrderBookAggregation.
var (
	OrderBookAggregation_name = map[int32]string{
		0: "L1",
		1: "L2",
		2: "L3",
	}
	OrderBookAggregation_value = map[string]int32{
		"L1": 0,
		"L2": 1,
		"L3": 2,
	}
)

func (x OrderBookAggregation) Enum() *OrderBookAggregation {
	p := new(OrderBookAggregation)
	*p = x
	return p
}

func (x OrderBookAggregation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderBookAggregation) Descriptor() protoreflect.EnumDescriptor {
	return file_market_data_proto_enumTypes[1].Descriptor()
}

func (OrderBookAggregation) Type() protoreflect.EnumType {
	return &file_market_data_proto_enumTypes[1]
}

func (x OrderBookAggregation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderBookAggregation.Descriptor instead.
func (OrderBookAggregation) EnumDescriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{1}
}

type OBL1Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestBid   float64                `protobuf:"fixed64,1,opt,name=best_bid,json=bestBid,proto3" json:"best_bid,omitempty"`
	BestAsk   float64                `protobuf:"fixed64,2,opt,name=best_ask,json=bestAsk,proto3" json:"best_ask,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *OBL1Update) Reset() {
	*x = OBL1Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OBL1Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBL1Update) ProtoMessage() {}

func (x *OBL1Update) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBL1Update.ProtoReflect.Descriptor instead.
func (*OBL1Update) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{0}
}

func (x *OBL1Update) GetBestBid() float64 {
	if x != nil {
		return x.BestBid
	}
	return 0
}

func (x *OBL1Update) GetBestAsk() float64 {
	if x != nil {
		return x.BestAsk
	}
	return 0
}

func (x *OBL1Update) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type OBL1Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BestBid   float64                `protobuf:"fixed64,1,opt,name=best_bid,json=bestBid,proto3" json:"best_bid,omitempty"`
	BestAsk   float64                `protobuf:"fixed64,2,opt,name=best_ask,json=bestAsk,proto3" json:"best_ask,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *OBL1Snapshot) Reset() {
	*x = OBL1Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OBL1Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBL1Snapshot) ProtoMessage() {}

func (x *OBL1Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBL1Snapshot.ProtoReflect.Descriptor instead.
func (*OBL1Snapshot) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{1}
}

func (x *OBL1Snapshot) GetBestBid() float64 {
	if x != nil {
		return x.BestBid
	}
	return 0
}

func (x *OBL1Snapshot) GetBestAsk() float64 {
	if x != nil {
		return x.BestAsk
	}
	return 0
}

func (x *OBL1Snapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type OBL2Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Levels    []*gorderbook_models.OrderBookLevel `protobuf:"bytes,1,rep,name=levels,proto3" json:"levels,omitempty"`
	Timestamp *timestamppb.Timestamp              `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Trade     bool                                `protobuf:"varint,4,opt,name=trade,proto3" json:"trade,omitempty"`
}

func (x *OBL2Update) Reset() {
	*x = OBL2Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OBL2Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBL2Update) ProtoMessage() {}

func (x *OBL2Update) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBL2Update.ProtoReflect.Descriptor instead.
func (*OBL2Update) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{2}
}

func (x *OBL2Update) GetLevels() []*gorderbook_models.OrderBookLevel {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *OBL2Update) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OBL2Update) GetTrade() bool {
	if x != nil {
		return x.Trade
	}
	return false
}

type OBL2Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bids          []*gorderbook_models.OrderBookLevel `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks          []*gorderbook_models.OrderBookLevel `protobuf:"bytes,3,rep,name=asks,proto3" json:"asks,omitempty"`
	Timestamp     *timestamppb.Timestamp              `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TickPrecision *wrapperspb.UInt64Value             `protobuf:"bytes,5,opt,name=tick_precision,json=tickPrecision,proto3" json:"tick_precision,omitempty"`
	LotPrecision  *wrapperspb.UInt64Value             `protobuf:"bytes,6,opt,name=lot_precision,json=lotPrecision,proto3" json:"lot_precision,omitempty"`
}

func (x *OBL2Snapshot) Reset() {
	*x = OBL2Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OBL2Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBL2Snapshot) ProtoMessage() {}

func (x *OBL2Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBL2Snapshot.ProtoReflect.Descriptor instead.
func (*OBL2Snapshot) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{3}
}

func (x *OBL2Snapshot) GetBids() []*gorderbook_models.OrderBookLevel {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OBL2Snapshot) GetAsks() []*gorderbook_models.OrderBookLevel {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *OBL2Snapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OBL2Snapshot) GetTickPrecision() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TickPrecision
	}
	return nil
}

func (x *OBL2Snapshot) GetLotPrecision() *wrapperspb.UInt64Value {
	if x != nil {
		return x.LotPrecision
	}
	return nil
}

type OBL3Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bids          []*gorderbook_models.Order `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks          []*gorderbook_models.Order `protobuf:"bytes,3,rep,name=asks,proto3" json:"asks,omitempty"`
	Timestamp     *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TickPrecision *wrapperspb.UInt64Value    `protobuf:"bytes,5,opt,name=tick_precision,json=tickPrecision,proto3" json:"tick_precision,omitempty"`
	LotPrecision  *wrapperspb.UInt64Value    `protobuf:"bytes,6,opt,name=lot_precision,json=lotPrecision,proto3" json:"lot_precision,omitempty"`
}

func (x *OBL3Update) Reset() {
	*x = OBL3Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OBL3Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBL3Update) ProtoMessage() {}

func (x *OBL3Update) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBL3Update.ProtoReflect.Descriptor instead.
func (*OBL3Update) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{4}
}

func (x *OBL3Update) GetBids() []*gorderbook_models.Order {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OBL3Update) GetAsks() []*gorderbook_models.Order {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *OBL3Update) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OBL3Update) GetTickPrecision() *wrapperspb.UInt64Value {
	if x != nil {
		return x.TickPrecision
	}
	return nil
}

func (x *OBL3Update) GetLotPrecision() *wrapperspb.UInt64Value {
	if x != nil {
		return x.LotPrecision
	}
	return nil
}

type OBL3Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bids      []*gorderbook_models.Order `protobuf:"bytes,2,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks      []*gorderbook_models.Order `protobuf:"bytes,3,rep,name=asks,proto3" json:"asks,omitempty"`
	Timestamp *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *OBL3Snapshot) Reset() {
	*x = OBL3Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OBL3Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBL3Snapshot) ProtoMessage() {}

func (x *OBL3Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBL3Snapshot.ProtoReflect.Descriptor instead.
func (*OBL3Snapshot) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{5}
}

func (x *OBL3Snapshot) GetBids() []*gorderbook_models.Order {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OBL3Snapshot) GetAsks() []*gorderbook_models.Order {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *OBL3Snapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type UPV3Snapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticks                   []*gorderbook_models.UPV3Tick     `protobuf:"bytes,1,rep,name=ticks,proto3" json:"ticks,omitempty"`
	Positions               []*gorderbook_models.UPV3Position `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions,omitempty"`
	Liquidity               []byte                            `protobuf:"bytes,3,opt,name=liquidity,proto3" json:"liquidity,omitempty"`
	SqrtPrice               []byte                            `protobuf:"bytes,4,opt,name=sqrt_price,json=sqrtPrice,proto3" json:"sqrt_price,omitempty"`
	FeeGrowthGlobal_0X128   []byte                            `protobuf:"bytes,5,opt,name=fee_growth_global_0x128,json=feeGrowthGlobal0x128,proto3" json:"fee_growth_global_0x128,omitempty"`
	FeeGrowthGlobal_1X128   []byte                            `protobuf:"bytes,6,opt,name=fee_growth_global_1x128,json=feeGrowthGlobal1x128,proto3" json:"fee_growth_global_1x128,omitempty"`
	ProtocolFees_0          []byte                            `protobuf:"bytes,7,opt,name=protocol_fees_0,json=protocolFees0,proto3" json:"protocol_fees_0,omitempty"`
	ProtocolFees_1          []byte                            `protobuf:"bytes,8,opt,name=protocol_fees_1,json=protocolFees1,proto3" json:"protocol_fees_1,omitempty"`
	TotalValueLockedToken_0 []byte                            `protobuf:"bytes,9,opt,name=total_value_locked_token_0,json=totalValueLockedToken0,proto3" json:"total_value_locked_token_0,omitempty"`
	TotalValueLockedToken_1 []byte                            `protobuf:"bytes,10,opt,name=total_value_locked_token_1,json=totalValueLockedToken1,proto3" json:"total_value_locked_token_1,omitempty"`
	Tick                    int32                             `protobuf:"varint,11,opt,name=tick,proto3" json:"tick,omitempty"`
	FeeTier                 int32                             `protobuf:"varint,12,opt,name=fee_tier,json=feeTier,proto3" json:"fee_tier,omitempty"`
	Timestamp               *timestamppb.Timestamp            `protobuf:"bytes,13,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *UPV3Snapshot) Reset() {
	*x = UPV3Snapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPV3Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPV3Snapshot) ProtoMessage() {}

func (x *UPV3Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPV3Snapshot.ProtoReflect.Descriptor instead.
func (*UPV3Snapshot) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{6}
}

func (x *UPV3Snapshot) GetTicks() []*gorderbook_models.UPV3Tick {
	if x != nil {
		return x.Ticks
	}
	return nil
}

func (x *UPV3Snapshot) GetPositions() []*gorderbook_models.UPV3Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *UPV3Snapshot) GetLiquidity() []byte {
	if x != nil {
		return x.Liquidity
	}
	return nil
}

func (x *UPV3Snapshot) GetSqrtPrice() []byte {
	if x != nil {
		return x.SqrtPrice
	}
	return nil
}

func (x *UPV3Snapshot) GetFeeGrowthGlobal_0X128() []byte {
	if x != nil {
		return x.FeeGrowthGlobal_0X128
	}
	return nil
}

func (x *UPV3Snapshot) GetFeeGrowthGlobal_1X128() []byte {
	if x != nil {
		return x.FeeGrowthGlobal_1X128
	}
	return nil
}

func (x *UPV3Snapshot) GetProtocolFees_0() []byte {
	if x != nil {
		return x.ProtocolFees_0
	}
	return nil
}

func (x *UPV3Snapshot) GetProtocolFees_1() []byte {
	if x != nil {
		return x.ProtocolFees_1
	}
	return nil
}

func (x *UPV3Snapshot) GetTotalValueLockedToken_0() []byte {
	if x != nil {
		return x.TotalValueLockedToken_0
	}
	return nil
}

func (x *UPV3Snapshot) GetTotalValueLockedToken_1() []byte {
	if x != nil {
		return x.TotalValueLockedToken_1
	}
	return nil
}

func (x *UPV3Snapshot) GetTick() int32 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *UPV3Snapshot) GetFeeTier() int32 {
	if x != nil {
		return x.FeeTier
	}
	return 0
}

func (x *UPV3Snapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type UPV3Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initialize      *gorderbook_models.UPV3Initialize      `protobuf:"bytes,1,opt,name=initialize,proto3" json:"initialize,omitempty"`
	Mint            *gorderbook_models.UPV3Mint            `protobuf:"bytes,2,opt,name=mint,proto3" json:"mint,omitempty"`
	Burn            *gorderbook_models.UPV3Burn            `protobuf:"bytes,3,opt,name=burn,proto3" json:"burn,omitempty"`
	Swap            *gorderbook_models.UPV3Swap            `protobuf:"bytes,4,opt,name=swap,proto3" json:"swap,omitempty"`
	Collect         *gorderbook_models.UPV3Collect         `protobuf:"bytes,5,opt,name=collect,proto3" json:"collect,omitempty"`
	Flash           *gorderbook_models.UPV3Flash           `protobuf:"bytes,6,opt,name=flash,proto3" json:"flash,omitempty"`
	SetFeeProtocol  *gorderbook_models.UPV3SetFeeProtocol  `protobuf:"bytes,7,opt,name=set_fee_protocol,json=setFeeProtocol,proto3" json:"set_fee_protocol,omitempty"`
	CollectProtocol *gorderbook_models.UPV3CollectProtocol `protobuf:"bytes,8,opt,name=collect_protocol,json=collectProtocol,proto3" json:"collect_protocol,omitempty"`
	Block           uint64                                 `protobuf:"varint,9,opt,name=block,proto3" json:"block,omitempty"`
	Timestamp       *timestamppb.Timestamp                 `protobuf:"bytes,10,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *UPV3Update) Reset() {
	*x = UPV3Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UPV3Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UPV3Update) ProtoMessage() {}

func (x *UPV3Update) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UPV3Update.ProtoReflect.Descriptor instead.
func (*UPV3Update) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{7}
}

func (x *UPV3Update) GetInitialize() *gorderbook_models.UPV3Initialize {
	if x != nil {
		return x.Initialize
	}
	return nil
}

func (x *UPV3Update) GetMint() *gorderbook_models.UPV3Mint {
	if x != nil {
		return x.Mint
	}
	return nil
}

func (x *UPV3Update) GetBurn() *gorderbook_models.UPV3Burn {
	if x != nil {
		return x.Burn
	}
	return nil
}

func (x *UPV3Update) GetSwap() *gorderbook_models.UPV3Swap {
	if x != nil {
		return x.Swap
	}
	return nil
}

func (x *UPV3Update) GetCollect() *gorderbook_models.UPV3Collect {
	if x != nil {
		return x.Collect
	}
	return nil
}

func (x *UPV3Update) GetFlash() *gorderbook_models.UPV3Flash {
	if x != nil {
		return x.Flash
	}
	return nil
}

func (x *UPV3Update) GetSetFeeProtocol() *gorderbook_models.UPV3SetFeeProtocol {
	if x != nil {
		return x.SetFeeProtocol
	}
	return nil
}

func (x *UPV3Update) GetCollectProtocol() *gorderbook_models.UPV3CollectProtocol {
	if x != nil {
		return x.CollectProtocol
	}
	return nil
}

func (x *UPV3Update) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *UPV3Update) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type ProtocolAssetUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfers   []*gorderbook_models.AssetTransfer `protobuf:"bytes,1,rep,name=transfers,proto3" json:"transfers,omitempty"`
	BlockNumber uint64                             `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockTime   *timestamppb.Timestamp             `protobuf:"bytes,3,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *ProtocolAssetUpdate) Reset() {
	*x = ProtocolAssetUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolAssetUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolAssetUpdate) ProtoMessage() {}

func (x *ProtocolAssetUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolAssetUpdate.ProtoReflect.Descriptor instead.
func (*ProtocolAssetUpdate) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{8}
}

func (x *ProtocolAssetUpdate) GetTransfers() []*gorderbook_models.AssetTransfer {
	if x != nil {
		return x.Transfers
	}
	return nil
}

func (x *ProtocolAssetUpdate) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *ProtocolAssetUpdate) GetBlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BlockTime
	}
	return nil
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price    float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Quantity float64 `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	ID       uint64  `protobuf:"varint,3,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{9}
}

func (x *Trade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Trade) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Trade) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type AggregatedTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bid         bool                   `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AggregateID uint64                 `protobuf:"varint,3,opt,name=aggregateID,proto3" json:"aggregateID,omitempty"`
	Trades      []*Trade               `protobuf:"bytes,4,rep,name=trades,proto3" json:"trades,omitempty"`
}

func (x *AggregatedTrade) Reset() {
	*x = AggregatedTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregatedTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregatedTrade) ProtoMessage() {}

func (x *AggregatedTrade) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregatedTrade.ProtoReflect.Descriptor instead.
func (*AggregatedTrade) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{10}
}

func (x *AggregatedTrade) GetBid() bool {
	if x != nil {
		return x.Bid
	}
	return false
}

func (x *AggregatedTrade) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *AggregatedTrade) GetAggregateID() uint64 {
	if x != nil {
		return x.AggregateID
	}
	return 0
}

func (x *AggregatedTrade) GetTrades() []*Trade {
	if x != nil {
		return x.Trades
	}
	return nil
}

type Liquidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bid       bool                   `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	OrderID   uint64                 `protobuf:"varint,3,opt,name=orderID,proto3" json:"orderID,omitempty"`
	Price     float64                `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Quantity  float64                `protobuf:"fixed64,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *Liquidation) Reset() {
	*x = Liquidation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Liquidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Liquidation) ProtoMessage() {}

func (x *Liquidation) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Liquidation.ProtoReflect.Descriptor instead.
func (*Liquidation) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{11}
}

func (x *Liquidation) GetBid() bool {
	if x != nil {
		return x.Bid
	}
	return false
}

func (x *Liquidation) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Liquidation) GetOrderID() uint64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *Liquidation) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Liquidation) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type Stat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	StatType  StatType               `protobuf:"varint,2,opt,name=stat_type,json=statType,proto3,enum=models.StatType" json:"stat_type,omitempty"`
	Value     float64                `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Stat) Reset() {
	*x = Stat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stat) ProtoMessage() {}

func (x *Stat) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stat.ProtoReflect.Descriptor instead.
func (*Stat) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{12}
}

func (x *Stat) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Stat) GetStatType() StatType {
	if x != nil {
		return x.StatType
	}
	return StatType_IndexValue
}

func (x *Stat) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Sale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transfer  []*gorderbook_models.AssetTransfer `protobuf:"bytes,1,rep,name=transfer,proto3" json:"transfer,omitempty"`
	Price     []byte                             `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Block     uint64                             `protobuf:"varint,3,opt,name=block,proto3" json:"block,omitempty"`
	Id        uint64                             `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Timestamp *timestamppb.Timestamp             `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Sale) Reset() {
	*x = Sale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sale) ProtoMessage() {}

func (x *Sale) ProtoReflect() protoreflect.Message {
	mi := &file_market_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sale.ProtoReflect.Descriptor instead.
func (*Sale) Descriptor() ([]byte, []int) {
	return file_market_data_proto_rawDescGZIP(), []int{13}
}

func (x *Sale) GetTransfer() []*gorderbook_models.AssetTransfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *Sale) GetPrice() []byte {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *Sale) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *Sale) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sale) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_market_data_proto protoreflect.FileDescriptor

var file_market_data_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x74, 0x69,
	0x63, 0x6b, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2f, 0x67,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2f, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x7c, 0x0a, 0x0a, 0x4f, 0x42, 0x4c, 0x31, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x65,
	0x73, 0x74, 0x41, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x7e, 0x0a, 0x0c, 0x4f, 0x42, 0x4c, 0x31, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x62, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x65,
	0x73, 0x74, 0x41, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x97, 0x01, 0x0a, 0x0a, 0x4f, 0x42, 0x4c, 0x32, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x0c, 0x4f, 0x42,
	0x4c, 0x32, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x62, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x62, 0x69, 0x64,
	0x73, 0x12, 0x35, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x02, 0x0a, 0x0a, 0x4f,
	0x42, 0x4c, 0x33, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x69, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x04, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x43, 0x0a, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x50, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x0c, 0x4f, 0x42, 0x4c, 0x33,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f,
	0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xdc,
	0x04, 0x0a, 0x0c, 0x55, 0x50, 0x56, 0x33, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x31, 0x0a, 0x05, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x55, 0x50, 0x56, 0x33, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x69, 0x63,
	0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x55, 0x50, 0x56, 0x33, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x71, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x71, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x66, 0x65, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x5f, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x30, 0x78, 0x31, 0x32, 0x38, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x14, 0x66, 0x65, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x30, 0x78, 0x31, 0x32, 0x38, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x65, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x77, 0x74, 0x68, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x31, 0x78, 0x31, 0x32, 0x38,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x66, 0x65, 0x65, 0x47, 0x72, 0x6f, 0x77, 0x74,
	0x68, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x31, 0x78, 0x31, 0x32, 0x38, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x30, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46,
	0x65, 0x65, 0x73, 0x30, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x31, 0x12, 0x3a, 0x0a, 0x1a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x30, 0x12, 0x3a, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f,
	0x74, 0x69, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x66, 0x65, 0x65, 0x54,
	0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xc4, 0x04,
	0x0a, 0x0a, 0x55, 0x50, 0x56, 0x33, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x55, 0x50, 0x56, 0x33, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x2e, 0x55, 0x50, 0x56, 0x33, 0x4d, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x6d, 0x69, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x04, 0x62, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x2e, 0x55, 0x50, 0x56, 0x33, 0x42, 0x75, 0x72, 0x6e, 0x52, 0x04, 0x62, 0x75, 0x72,
	0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x55, 0x50, 0x56, 0x33, 0x53, 0x77, 0x61, 0x70, 0x52, 0x04, 0x73, 0x77,
	0x61, 0x70, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x55, 0x50, 0x56, 0x33, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x55, 0x50, 0x56, 0x33, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x73, 0x68,
	0x12, 0x4f, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x55,
	0x50, 0x56, 0x33, 0x53, 0x65, 0x74, 0x46, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x46, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x55, 0x50, 0x56, 0x33, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x49, 0x44, 0x22, 0xa6, 0x01, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xa5,
	0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x69, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xba,
	0x01, 0x0a, 0x04, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0xec, 0x01, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c,
	0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10,
	0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x57, 0x41, 0x50,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x6d, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x10, 0x0a, 0x2a, 0x2e, 0x0a, 0x14, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x31, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x32,
	0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x33, 0x10, 0x02, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x74, 0x69,
	0x63, 0x6b, 0x73, 0x2f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_data_proto_rawDescOnce sync.Once
	file_market_data_proto_rawDescData = file_market_data_proto_rawDesc
)

func file_market_data_proto_rawDescGZIP() []byte {
	file_market_data_proto_rawDescOnce.Do(func() {
		file_market_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_data_proto_rawDescData)
	})
	return file_market_data_proto_rawDescData
}

var file_market_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_market_data_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_market_data_proto_goTypes = []interface{}{
	(StatType)(0),                                 // 0: models.StatType
	(OrderBookAggregation)(0),                     // 1: models.OrderBookAggregation
	(*OBL1Update)(nil),                            // 2: models.OBL1Update
	(*OBL1Snapshot)(nil),                          // 3: models.OBL1Snapshot
	(*OBL2Update)(nil),                            // 4: models.OBL2Update
	(*OBL2Snapshot)(nil),                          // 5: models.OBL2Snapshot
	(*OBL3Update)(nil),                            // 6: models.OBL3Update
	(*OBL3Snapshot)(nil),                          // 7: models.OBL3Snapshot
	(*UPV3Snapshot)(nil),                          // 8: models.UPV3Snapshot
	(*UPV3Update)(nil),                            // 9: models.UPV3Update
	(*ProtocolAssetUpdate)(nil),                   // 10: models.ProtocolAssetUpdate
	(*Trade)(nil),                                 // 11: models.Trade
	(*AggregatedTrade)(nil),                       // 12: models.AggregatedTrade
	(*Liquidation)(nil),                           // 13: models.Liquidation
	(*Stat)(nil),                                  // 14: models.Stat
	(*Sale)(nil),                                  // 15: models.Sale
	(*timestamppb.Timestamp)(nil),                 // 16: google.protobuf.Timestamp
	(*gorderbook_models.OrderBookLevel)(nil),      // 17: gorderbook.models.OrderBookLevel
	(*wrapperspb.UInt64Value)(nil),                // 18: google.protobuf.UInt64Value
	(*gorderbook_models.Order)(nil),               // 19: gorderbook.models.Order
	(*gorderbook_models.UPV3Tick)(nil),            // 20: gorderbook.models.UPV3Tick
	(*gorderbook_models.UPV3Position)(nil),        // 21: gorderbook.models.UPV3Position
	(*gorderbook_models.UPV3Initialize)(nil),      // 22: gorderbook.models.UPV3Initialize
	(*gorderbook_models.UPV3Mint)(nil),            // 23: gorderbook.models.UPV3Mint
	(*gorderbook_models.UPV3Burn)(nil),            // 24: gorderbook.models.UPV3Burn
	(*gorderbook_models.UPV3Swap)(nil),            // 25: gorderbook.models.UPV3Swap
	(*gorderbook_models.UPV3Collect)(nil),         // 26: gorderbook.models.UPV3Collect
	(*gorderbook_models.UPV3Flash)(nil),           // 27: gorderbook.models.UPV3Flash
	(*gorderbook_models.UPV3SetFeeProtocol)(nil),  // 28: gorderbook.models.UPV3SetFeeProtocol
	(*gorderbook_models.UPV3CollectProtocol)(nil), // 29: gorderbook.models.UPV3CollectProtocol
	(*gorderbook_models.AssetTransfer)(nil),       // 30: gorderbook.models.AssetTransfer
}
var file_market_data_proto_depIdxs = []int32{
	16, // 0: models.OBL1Update.timestamp:type_name -> google.protobuf.Timestamp
	16, // 1: models.OBL1Snapshot.timestamp:type_name -> google.protobuf.Timestamp
	17, // 2: models.OBL2Update.levels:type_name -> gorderbook.models.OrderBookLevel
	16, // 3: models.OBL2Update.timestamp:type_name -> google.protobuf.Timestamp
	17, // 4: models.OBL2Snapshot.bids:type_name -> gorderbook.models.OrderBookLevel
	17, // 5: models.OBL2Snapshot.asks:type_name -> gorderbook.models.OrderBookLevel
	16, // 6: models.OBL2Snapshot.timestamp:type_name -> google.protobuf.Timestamp
	18, // 7: models.OBL2Snapshot.tick_precision:type_name -> google.protobuf.UInt64Value
	18, // 8: models.OBL2Snapshot.lot_precision:type_name -> google.protobuf.UInt64Value
	19, // 9: models.OBL3Update.bids:type_name -> gorderbook.models.Order
	19, // 10: models.OBL3Update.asks:type_name -> gorderbook.models.Order
	16, // 11: models.OBL3Update.timestamp:type_name -> google.protobuf.Timestamp
	18, // 12: models.OBL3Update.tick_precision:type_name -> google.protobuf.UInt64Value
	18, // 13: models.OBL3Update.lot_precision:type_name -> google.protobuf.UInt64Value
	19, // 14: models.OBL3Snapshot.bids:type_name -> gorderbook.models.Order
	19, // 15: models.OBL3Snapshot.asks:type_name -> gorderbook.models.Order
	16, // 16: models.OBL3Snapshot.timestamp:type_name -> google.protobuf.Timestamp
	20, // 17: models.UPV3Snapshot.ticks:type_name -> gorderbook.models.UPV3Tick
	21, // 18: models.UPV3Snapshot.positions:type_name -> gorderbook.models.UPV3Position
	16, // 19: models.UPV3Snapshot.timestamp:type_name -> google.protobuf.Timestamp
	22, // 20: models.UPV3Update.initialize:type_name -> gorderbook.models.UPV3Initialize
	23, // 21: models.UPV3Update.mint:type_name -> gorderbook.models.UPV3Mint
	24, // 22: models.UPV3Update.burn:type_name -> gorderbook.models.UPV3Burn
	25, // 23: models.UPV3Update.swap:type_name -> gorderbook.models.UPV3Swap
	26, // 24: models.UPV3Update.collect:type_name -> gorderbook.models.UPV3Collect
	27, // 25: models.UPV3Update.flash:type_name -> gorderbook.models.UPV3Flash
	28, // 26: models.UPV3Update.set_fee_protocol:type_name -> gorderbook.models.UPV3SetFeeProtocol
	29, // 27: models.UPV3Update.collect_protocol:type_name -> gorderbook.models.UPV3CollectProtocol
	16, // 28: models.UPV3Update.timestamp:type_name -> google.protobuf.Timestamp
	30, // 29: models.ProtocolAssetUpdate.transfers:type_name -> gorderbook.models.AssetTransfer
	16, // 30: models.ProtocolAssetUpdate.block_time:type_name -> google.protobuf.Timestamp
	16, // 31: models.AggregatedTrade.timestamp:type_name -> google.protobuf.Timestamp
	11, // 32: models.AggregatedTrade.trades:type_name -> models.Trade
	16, // 33: models.Liquidation.timestamp:type_name -> google.protobuf.Timestamp
	16, // 34: models.Stat.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 35: models.Stat.stat_type:type_name -> models.StatType
	30, // 36: models.Sale.transfer:type_name -> gorderbook.models.AssetTransfer
	16, // 37: models.Sale.timestamp:type_name -> google.protobuf.Timestamp
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_market_data_proto_init() }
func file_market_data_proto_init() {
	if File_market_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_market_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OBL1Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OBL1Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OBL2Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OBL2Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OBL3Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OBL3Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPV3Snapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UPV3Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolAssetUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregatedTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Liquidation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_market_data_proto_goTypes,
		DependencyIndexes: file_market_data_proto_depIdxs,
		EnumInfos:         file_market_data_proto_enumTypes,
		MessageInfos:      file_market_data_proto_msgTypes,
	}.Build()
	File_market_data_proto = out.File
	file_market_data_proto_rawDesc = nil
	file_market_data_proto_goTypes = nil
	file_market_data_proto_depIdxs = nil
}
