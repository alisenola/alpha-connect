// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: remote_pubsub_messages.proto

package messages

import (
	fmt "fmt"
	actor "github.com/AsynkronIT/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RemotePubSubMessage struct {
	ID      uint64     `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Topic   string     `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Message *types.Any `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RemotePubSubMessage) Reset()      { *m = RemotePubSubMessage{} }
func (*RemotePubSubMessage) ProtoMessage() {}
func (*RemotePubSubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a777d962942c13d4, []int{0}
}
func (m *RemotePubSubMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemotePubSubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemotePubSubMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemotePubSubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemotePubSubMessage.Merge(m, src)
}
func (m *RemotePubSubMessage) XXX_Size() int {
	return m.Size()
}
func (m *RemotePubSubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RemotePubSubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RemotePubSubMessage proto.InternalMessageInfo

func (m *RemotePubSubMessage) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RemotePubSubMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *RemotePubSubMessage) GetMessage() *types.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

type PubSubSubscribeRequest struct {
	RequestID  int64      `protobuf:"varint,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Pattern    string     `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Subscriber *actor.PID `protobuf:"bytes,3,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
}

func (m *PubSubSubscribeRequest) Reset()      { *m = PubSubSubscribeRequest{} }
func (*PubSubSubscribeRequest) ProtoMessage() {}
func (*PubSubSubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a777d962942c13d4, []int{1}
}
func (m *PubSubSubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubSubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubSubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubSubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubSubscribeRequest.Merge(m, src)
}
func (m *PubSubSubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *PubSubSubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubSubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubSubscribeRequest proto.InternalMessageInfo

func (m *PubSubSubscribeRequest) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *PubSubSubscribeRequest) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *PubSubSubscribeRequest) GetSubscriber() *actor.PID {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

type PubSubSubscribeResponse struct {
	RequestID int64  `protobuf:"varint,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Error     string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *PubSubSubscribeResponse) Reset()      { *m = PubSubSubscribeResponse{} }
func (*PubSubSubscribeResponse) ProtoMessage() {}
func (*PubSubSubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a777d962942c13d4, []int{2}
}
func (m *PubSubSubscribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubSubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubSubscribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubSubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubSubscribeResponse.Merge(m, src)
}
func (m *PubSubSubscribeResponse) XXX_Size() int {
	return m.Size()
}
func (m *PubSubSubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubSubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubSubscribeResponse proto.InternalMessageInfo

func (m *PubSubSubscribeResponse) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *PubSubSubscribeResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type PubSubUnsubscribeRequest struct {
	RequestID  int64      `protobuf:"varint,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Pattern    string     `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Subscriber *actor.PID `protobuf:"bytes,3,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
}

func (m *PubSubUnsubscribeRequest) Reset()      { *m = PubSubUnsubscribeRequest{} }
func (*PubSubUnsubscribeRequest) ProtoMessage() {}
func (*PubSubUnsubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a777d962942c13d4, []int{3}
}
func (m *PubSubUnsubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubUnsubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubUnsubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubUnsubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubUnsubscribeRequest.Merge(m, src)
}
func (m *PubSubUnsubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *PubSubUnsubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubUnsubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubUnsubscribeRequest proto.InternalMessageInfo

func (m *PubSubUnsubscribeRequest) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *PubSubUnsubscribeRequest) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *PubSubUnsubscribeRequest) GetSubscriber() *actor.PID {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

type PubSubUnsubscribeResponse struct {
	RequestID int64 `protobuf:"varint,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (m *PubSubUnsubscribeResponse) Reset()      { *m = PubSubUnsubscribeResponse{} }
func (*PubSubUnsubscribeResponse) ProtoMessage() {}
func (*PubSubUnsubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a777d962942c13d4, []int{4}
}
func (m *PubSubUnsubscribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubUnsubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubUnsubscribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubUnsubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubUnsubscribeResponse.Merge(m, src)
}
func (m *PubSubUnsubscribeResponse) XXX_Size() int {
	return m.Size()
}
func (m *PubSubUnsubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubUnsubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubUnsubscribeResponse proto.InternalMessageInfo

func (m *PubSubUnsubscribeResponse) GetRequestID() int64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

type PubSubUnsubscribeAll struct {
	Subscriber *actor.PID `protobuf:"bytes,4,opt,name=subscriber,proto3" json:"subscriber,omitempty"`
}

func (m *PubSubUnsubscribeAll) Reset()      { *m = PubSubUnsubscribeAll{} }
func (*PubSubUnsubscribeAll) ProtoMessage() {}
func (*PubSubUnsubscribeAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_a777d962942c13d4, []int{5}
}
func (m *PubSubUnsubscribeAll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubUnsubscribeAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubSubUnsubscribeAll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubSubUnsubscribeAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubUnsubscribeAll.Merge(m, src)
}
func (m *PubSubUnsubscribeAll) XXX_Size() int {
	return m.Size()
}
func (m *PubSubUnsubscribeAll) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubUnsubscribeAll.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubUnsubscribeAll proto.InternalMessageInfo

func (m *PubSubUnsubscribeAll) GetSubscriber() *actor.PID {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

func init() {
	proto.RegisterType((*RemotePubSubMessage)(nil), "messages.RemotePubSubMessage")
	proto.RegisterType((*PubSubSubscribeRequest)(nil), "messages.PubSubSubscribeRequest")
	proto.RegisterType((*PubSubSubscribeResponse)(nil), "messages.PubSubSubscribeResponse")
	proto.RegisterType((*PubSubUnsubscribeRequest)(nil), "messages.PubSubUnsubscribeRequest")
	proto.RegisterType((*PubSubUnsubscribeResponse)(nil), "messages.PubSubUnsubscribeResponse")
	proto.RegisterType((*PubSubUnsubscribeAll)(nil), "messages.PubSubUnsubscribeAll")
}

func init() { proto.RegisterFile("remote_pubsub_messages.proto", fileDescriptor_a777d962942c13d4) }

var fileDescriptor_a777d962942c13d4 = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0xb5, 0xfe, 0x53, 0xd7, 0x53, 0xe8, 0x41, 0x15, 0xad, 0x6c, 0xcc, 0x62, 0x74, 0x32,
	0x85, 0xae, 0xa0, 0x2d, 0x85, 0x1e, 0x6d, 0x7c, 0xd1, 0xc1, 0x60, 0xe4, 0xf6, 0x6c, 0xb4, 0x62,
	0xab, 0x1a, 0xdb, 0x5a, 0x75, 0xff, 0x1c, 0x0c, 0x25, 0xe4, 0x11, 0xf2, 0x18, 0x79, 0x94, 0x1c,
	0x7d, 0xf4, 0x31, 0x96, 0x2f, 0x39, 0xfa, 0x11, 0x02, 0x5a, 0x89, 0x84, 0x38, 0x24, 0xb9, 0xe5,
	0x36, 0xdf, 0xcc, 0xe8, 0xfb, 0xcd, 0x27, 0x16, 0x7a, 0x82, 0xad, 0xb9, 0x62, 0xf3, 0x4c, 0x53,
	0xa9, 0xe9, 0x7c, 0xcd, 0xa4, 0x8c, 0x12, 0x26, 0x49, 0x26, 0xb8, 0xe2, 0xf6, 0xdb, 0x4a, 0x77,
	0x7f, 0x24, 0x0b, 0xf5, 0x57, 0x53, 0x12, 0xf3, 0xb5, 0x3f, 0x94, 0x9b, 0x74, 0x29, 0x78, 0x1a,
	0xfc, 0xf2, 0x8b, 0xb5, 0x28, 0x56, 0x5c, 0x7c, 0x49, 0xb8, 0x5f, 0x14, 0xa6, 0x57, 0x3a, 0x74,
	0x3b, 0x09, 0xe7, 0xc9, 0x8a, 0x99, 0x26, 0xd5, 0x7f, 0xfc, 0x28, 0xdd, 0x98, 0x91, 0xb7, 0x84,
	0x0f, 0x61, 0x01, 0x9f, 0x6a, 0x3a, 0xd3, 0x74, 0x62, 0x50, 0xf6, 0x7b, 0xa8, 0x05, 0x63, 0x17,
	0xf5, 0xd1, 0xa0, 0x11, 0xd6, 0x82, 0xb1, 0xed, 0x40, 0x53, 0xf1, 0x6c, 0x11, 0xbb, 0xb5, 0x3e,
	0x1a, 0xb4, 0x43, 0x23, 0x6c, 0x02, 0xad, 0xf2, 0x36, 0xb7, 0xde, 0x47, 0x83, 0x77, 0x5f, 0x1d,
	0x62, 0x48, 0xa4, 0x22, 0x91, 0x61, 0xba, 0x09, 0xab, 0x25, 0xef, 0x3f, 0x7c, 0x34, 0x98, 0x99,
	0xa6, 0x32, 0x16, 0x0b, 0xca, 0x42, 0xf6, 0x4f, 0x33, 0xa9, 0xec, 0x1e, 0xb4, 0x85, 0x29, 0x4b,
	0x6c, 0x3d, 0xbc, 0x6b, 0xd8, 0x2e, 0xb4, 0xb2, 0x48, 0x29, 0x26, 0xd2, 0x92, 0x5f, 0x49, 0xfb,
	0x33, 0x80, 0xac, 0xbc, 0x44, 0x79, 0x04, 0x90, 0xe2, 0x17, 0x90, 0x69, 0x30, 0x0e, 0xef, 0x4d,
	0xbd, 0x09, 0x7c, 0x3a, 0xa1, 0xcb, 0x8c, 0xa7, 0x92, 0x3d, 0x83, 0x77, 0xa0, 0xc9, 0x84, 0xe0,
	0xa2, 0x0a, 0x5f, 0x08, 0xef, 0x0c, 0x5c, 0x63, 0xf7, 0x3b, 0x95, 0xaf, 0x11, 0xe7, 0x27, 0x74,
	0x1e, 0xe1, 0xbf, 0x24, 0x90, 0x37, 0x02, 0xe7, 0xe4, 0xd3, 0xe1, 0x6a, 0xf5, 0x00, 0xdf, 0x78,
	0x0a, 0x3f, 0xfa, 0xbe, 0xdd, 0x63, 0x6b, 0xb7, 0xc7, 0xd6, 0x71, 0x8f, 0xd1, 0x79, 0x8e, 0xd1,
	0x65, 0x8e, 0xd1, 0x55, 0x8e, 0xd1, 0x36, 0xc7, 0xe8, 0x3a, 0xc7, 0xe8, 0x26, 0xc7, 0xd6, 0x31,
	0xc7, 0xe8, 0xe2, 0x80, 0xad, 0xed, 0x01, 0x5b, 0xbb, 0x03, 0xb6, 0xe8, 0x9b, 0xe2, 0x61, 0x7c,
	0xbb, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xe0, 0xc0, 0x67, 0xf2, 0x02, 0x00, 0x00,
}

func (this *RemotePubSubMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemotePubSubMessage)
	if !ok {
		that2, ok := that.(RemotePubSubMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *PubSubSubscribeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubSubscribeRequest)
	if !ok {
		that2, ok := that.(PubSubSubscribeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.Pattern != that1.Pattern {
		return false
	}
	if !this.Subscriber.Equal(that1.Subscriber) {
		return false
	}
	return true
}
func (this *PubSubSubscribeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubSubscribeResponse)
	if !ok {
		that2, ok := that.(PubSubSubscribeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *PubSubUnsubscribeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubUnsubscribeRequest)
	if !ok {
		that2, ok := that.(PubSubUnsubscribeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.Pattern != that1.Pattern {
		return false
	}
	if !this.Subscriber.Equal(that1.Subscriber) {
		return false
	}
	return true
}
func (this *PubSubUnsubscribeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubUnsubscribeResponse)
	if !ok {
		that2, ok := that.(PubSubUnsubscribeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	return true
}
func (this *PubSubUnsubscribeAll) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PubSubUnsubscribeAll)
	if !ok {
		that2, ok := that.(PubSubUnsubscribeAll)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Subscriber.Equal(that1.Subscriber) {
		return false
	}
	return true
}
func (this *RemotePubSubMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.RemotePubSubMessage{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubSubscribeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.PubSubSubscribeRequest{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "Pattern: "+fmt.Sprintf("%#v", this.Pattern)+",\n")
	if this.Subscriber != nil {
		s = append(s, "Subscriber: "+fmt.Sprintf("%#v", this.Subscriber)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubSubscribeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&messages.PubSubSubscribeResponse{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubUnsubscribeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&messages.PubSubUnsubscribeRequest{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "Pattern: "+fmt.Sprintf("%#v", this.Pattern)+",\n")
	if this.Subscriber != nil {
		s = append(s, "Subscriber: "+fmt.Sprintf("%#v", this.Subscriber)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubUnsubscribeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.PubSubUnsubscribeResponse{")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PubSubUnsubscribeAll) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&messages.PubSubUnsubscribeAll{")
	if this.Subscriber != nil {
		s = append(s, "Subscriber: "+fmt.Sprintf("%#v", this.Subscriber)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringRemotePubsubMessages(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RemotePubSubMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemotePubSubMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemotePubSubMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size, err := m.Message.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubSubSubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubSubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubSubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subscriber != nil {
		{
			size, err := m.Subscriber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pattern) > 0 {
		i -= len(m.Pattern)
		copy(dAtA[i:], m.Pattern)
		i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(len(m.Pattern)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestID != 0 {
		i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubSubSubscribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubSubscribeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubSubscribeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestID != 0 {
		i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubSubUnsubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubUnsubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubUnsubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subscriber != nil {
		{
			size, err := m.Subscriber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pattern) > 0 {
		i -= len(m.Pattern)
		copy(dAtA[i:], m.Pattern)
		i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(len(m.Pattern)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestID != 0 {
		i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubSubUnsubscribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubUnsubscribeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubUnsubscribeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestID != 0 {
		i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PubSubUnsubscribeAll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubUnsubscribeAll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubUnsubscribeAll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subscriber != nil {
		{
			size, err := m.Subscriber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRemotePubsubMessages(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func encodeVarintRemotePubsubMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovRemotePubsubMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RemotePubSubMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovRemotePubsubMessages(uint64(m.ID))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovRemotePubsubMessages(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovRemotePubsubMessages(uint64(l))
	}
	return n
}

func (m *PubSubSubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovRemotePubsubMessages(uint64(m.RequestID))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovRemotePubsubMessages(uint64(l))
	}
	if m.Subscriber != nil {
		l = m.Subscriber.Size()
		n += 1 + l + sovRemotePubsubMessages(uint64(l))
	}
	return n
}

func (m *PubSubSubscribeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovRemotePubsubMessages(uint64(m.RequestID))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovRemotePubsubMessages(uint64(l))
	}
	return n
}

func (m *PubSubUnsubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovRemotePubsubMessages(uint64(m.RequestID))
	}
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovRemotePubsubMessages(uint64(l))
	}
	if m.Subscriber != nil {
		l = m.Subscriber.Size()
		n += 1 + l + sovRemotePubsubMessages(uint64(l))
	}
	return n
}

func (m *PubSubUnsubscribeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovRemotePubsubMessages(uint64(m.RequestID))
	}
	return n
}

func (m *PubSubUnsubscribeAll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subscriber != nil {
		l = m.Subscriber.Size()
		n += 1 + l + sovRemotePubsubMessages(uint64(l))
	}
	return n
}

func sovRemotePubsubMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRemotePubsubMessages(x uint64) (n int) {
	return sovRemotePubsubMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RemotePubSubMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemotePubSubMessage{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`Message:` + strings.Replace(fmt.Sprintf("%v", this.Message), "Any", "types.Any", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubSubscribeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubSubscribeRequest{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`Pattern:` + fmt.Sprintf("%v", this.Pattern) + `,`,
		`Subscriber:` + strings.Replace(fmt.Sprintf("%v", this.Subscriber), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubSubscribeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubSubscribeResponse{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubUnsubscribeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubUnsubscribeRequest{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`Pattern:` + fmt.Sprintf("%v", this.Pattern) + `,`,
		`Subscriber:` + strings.Replace(fmt.Sprintf("%v", this.Subscriber), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubUnsubscribeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubUnsubscribeResponse{`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PubSubUnsubscribeAll) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PubSubUnsubscribeAll{`,
		`Subscriber:` + strings.Replace(fmt.Sprintf("%v", this.Subscriber), "PID", "actor.PID", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRemotePubsubMessages(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RemotePubSubMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemotePubsubMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemotePubSubMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemotePubSubMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &types.Any{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemotePubsubMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubSubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemotePubsubMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubSubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubSubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscriber == nil {
				m.Subscriber = &actor.PID{}
			}
			if err := m.Subscriber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemotePubsubMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubSubscribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemotePubsubMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubSubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubSubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemotePubsubMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubUnsubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemotePubsubMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubUnsubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubUnsubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscriber == nil {
				m.Subscriber = &actor.PID{}
			}
			if err := m.Subscriber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemotePubsubMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubUnsubscribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemotePubsubMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubUnsubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubUnsubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRemotePubsubMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubUnsubscribeAll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemotePubsubMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubUnsubscribeAll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubUnsubscribeAll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscriber == nil {
				m.Subscriber = &actor.PID{}
			}
			if err := m.Subscriber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemotePubsubMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemotePubsubMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRemotePubsubMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRemotePubsubMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemotePubsubMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRemotePubsubMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRemotePubsubMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRemotePubsubMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRemotePubsubMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRemotePubsubMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRemotePubsubMessages = fmt.Errorf("proto: unexpected end of group")
)
